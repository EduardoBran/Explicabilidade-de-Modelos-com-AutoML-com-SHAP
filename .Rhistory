} else if (modelo_escolhido == "PrevisaoChurn") {
# Interface do modelo PrevisaoChurn
fluidPage(
titlePanel("Previsão de Churn - Modelo TC"),
numericInput("idade_input", "Idade:", min = 18, max = 100, value = 25),
selectInput("genero_input", "Gênero:", choices = c("Feminino", "Masculino"), selected = "Feminino"),
selectInput("historico_input", "Histórico de Compras:", choices = c("Alto", "Baixo", "Médio"), selected = "Alto"),
selectInput("categoria_input", "Categoria Preferida:", choices = unique(dados$categoria_preferida), selected = unique(dados$categoria_preferida)[1]),
numericInput("tempo_input", "Tempo na Plataforma (em meses):", min = 1, max = 100, value = 10),
numericInput("produtos_input", "Produtos Visualizados:", min = 1, max = 100, value = 20),
selectInput("atividade_input", "Nível de Atividade:", choices = c("Alto", "Baixo", "Médio"), selected = "Alto"),
actionButton("previsao_btn", "Fazer Previsão")
)
} else if (modelo_escolhido == "RecomendacaoProdutos") {
# Interface do modelo RecomendacaoProdutos
fluidPage(
titlePanel("Recomendação de Produtos - Modelo PR"),
numericInput("idade_input", "Idade:", min = 18, max = 100, value = 25),
selectInput("genero_input", "Gênero:", choices = c("Feminino", "Masculino"), selected = "Feminino"),
selectInput("historico_input", "Histórico de Compras:", choices = c("Alto", "Baixo", "Médio"), selected = "Alto"),
selectInput("categoria_input", "Categoria Preferida:", choices = unique(dados$categoria_preferida), selected = unique(dados$categoria_preferida)[1]),
numericInput("tempo_input", "Tempo na Plataforma (em meses):", min = 1, max = 100, value = 10),
numericInput("produtos_input", "Produtos Visualizados:", min = 1, max = 100, value = 20),
selectInput("atividade_input", "Nível de Atividade:", choices = c("Alto", "Baixo", "Médio"), selected = "Alto"),
actionButton("recomendacao_btn", "Recomendar Produtos")
)
}
})
# Lógica após o botão "Seguir" ser clicado
observeEvent(input$seguir_btn, {
modelo_escolhido <- input$modelo_input
output$modelo_ui <- renderUI({})
# Lógica comum para os três modelos
observeEvent(input$previsao_btn, {
# Criando um data frame temporário com os dados inseridos pelo usuário
novo_dado <- data.frame(
idade = input$idade_input,
genero = input$genero_input,
historico_compras = input$historico_input,
categoria_preferida = input$categoria_input,
tempo_na_plataforma = input$tempo_input,
produtos_visualizados = input$produtos_input,
nivel_atividade = input$atividade_input
)
# Realizar previsão com base no modelo escolhido
previsao <- switch(
modelo_escolhido,
PrevisaoCompra = realizar_previsao(modelo_rc, novo_dado),
PrevisaoChurn = realizar_previsao(modelo_tc, novo_dado),
RecomendacaoProdutos = realizar_previsao(modelo_pr, novo_dado)
)
# Mensagem de saída
output$resultado_texto <- renderText({
if (previsao[1, "predict"] == "Sim") {
"SIM. Há uma grande possibilidade do usuário realizar a ação desejada."
} else {
"NÃO. Há uma grande possibilidade do usuário não realizar a ação desejada."
}
})
})
# Lógica específica para RecomendacaoProdutos
observeEvent(input$recomendacao_btn, {
# Criando um data frame temporário com os dados inseridos pelo usuário
novo_dado <- data.frame(
idade = input$idade_input,
genero = input$genero_input,
historico_compras = input$historico_input,
categoria_preferida = input$categoria_input,
tempo_na_plataforma = input$tempo_input,
produtos_visualizados = input$produtos_input,
nivel_atividade = input$atividade_input
)
# Realizar previsão com base no modelo escolhido
previsao <- realizar_previsao(modelo_pr, novo_dado)
# Mensagem de saída
output$resultado_texto <- renderText({
paste("Produto Recomendado:", previsao[1, "predict"])
})
})
})
}
# Rodando a aplicação
shinyApp(ui = ui, server = server)
library(shinyjs)
# Função para realizar a previsão com os modelos
realizar_previsao <- function(modelo, novo_dado) {
# Modificando qualquer variável chr para factor
novo_dado <- novo_dado %>% mutate_if(is.character, factor)
# Criação de Novas Características (Variáveis)
novo_dado <- novo_dado %>% mutate(
razao_produtos_tempo = produtos_visualizados / tempo_na_plataforma,
interacao_idade_produtos = idade * produtos_visualizados
)
# Adicionando colunas temporárias faltantes
if (!("realizou_compra" %in% colnames(novo_dado))) novo_dado$realizou_compra <- NA
if (!("churn" %in% colnames(novo_dado))) novo_dado$churn <- NA
if (!("produto_recomendado" %in% colnames(novo_dado))) novo_dado$produto_recomendado <- NA
# Fazendo a previsão
previsao <- h2o.predict(modelo, as.h2o(novo_dado))
return(previsao)
}
# UI principal
ui <- fluidPage(
titlePanel("Escolha do Modelo"),
sidebarLayout(
sidebarPanel(
# Escolha do modelo
selectInput("modelo_input", "Escolha o Modelo:",
choices = c("PrevisaoCompra", "PrevisaoChurn", "RecomendacaoProdutos")),
# Botão "seguir"
actionButton("seguir_btn", "Seguir", disabled = TRUE)
),
mainPanel(
# Conteúdo da interface do modelo escolhido
uiOutput("modelo_ui"),
# Saída
textOutput("resultado_texto")
)
)
)
# Server principal
server <- function(input, output, session) {
# Função para criar a interface do modelo escolhido
output$modelo_ui <- renderUI({
modelo_escolhido <- input$modelo_input
# Desativar botão até que um modelo seja escolhido
shinyjs::disable("seguir_btn")
# Criar a interface do modelo escolhido
if (!is.null(modelo_escolhido)) {
shinyjs::enable("seguir_btn")
if (modelo_escolhido == "PrevisaoCompra") {
# Interface do modelo PrevisaoCompra
fluidPage(
titlePanel("Previsão de Compra - Modelo RC"),
numericInput("idade_input", "Idade:", min = 18, max = 100, value = 25),
selectInput("genero_input", "Gênero:", choices = c("Feminino", "Masculino"), selected = "Feminino"),
selectInput("historico_input", "Histórico de Compras:", choices = c("Alto", "Baixo", "Médio"), selected = "Alto"),
selectInput("categoria_input", "Categoria Preferida:", choices = unique(dados$categoria_preferida), selected = unique(dados$categoria_preferida)[1]),
numericInput("tempo_input", "Tempo na Plataforma (em meses):", min = 1, max = 100, value = 10),
numericInput("produtos_input", "Produtos Visualizados:", min = 1, max = 100, value = 20),
selectInput("atividade_input", "Nível de Atividade:", choices = c("Alto", "Baixo", "Médio"), selected = "Alto"),
actionButton("previsao_btn", "Fazer Previsão")
)
} else if (modelo_escolhido == "PrevisaoChurn") {
# Interface do modelo PrevisaoChurn
fluidPage(
titlePanel("Previsão de Churn - Modelo TC"),
numericInput("idade_input", "Idade:", min = 18, max = 100, value = 25),
selectInput("genero_input", "Gênero:", choices = c("Feminino", "Masculino"), selected = "Feminino"),
selectInput("historico_input", "Histórico de Compras:", choices = c("Alto", "Baixo", "Médio"), selected = "Alto"),
selectInput("categoria_input", "Categoria Preferida:", choices = unique(dados$categoria_preferida), selected = unique(dados$categoria_preferida)[1]),
numericInput("tempo_input", "Tempo na Plataforma (em meses):", min = 1, max = 100, value = 10),
numericInput("produtos_input", "Produtos Visualizados:", min = 1, max = 100, value = 20),
selectInput("atividade_input", "Nível de Atividade:", choices = c("Alto", "Baixo", "Médio"), selected = "Alto"),
actionButton("previsao_btn", "Fazer Previsão")
)
} else if (modelo_escolhido == "RecomendacaoProdutos") {
# Interface do modelo RecomendacaoProdutos
fluidPage(
titlePanel("Recomendação de Produtos - Modelo PR"),
numericInput("idade_input", "Idade:", min = 18, max = 100, value = 25),
selectInput("genero_input", "Gênero:", choices = c("Feminino", "Masculino"), selected = "Feminino"),
selectInput("historico_input", "Histórico de Compras:", choices = c("Alto", "Baixo", "Médio"), selected = "Alto"),
selectInput("categoria_input", "Categoria Preferida:", choices = unique(dados$categoria_preferida), selected = unique(dados$categoria_preferida)[1]),
numericInput("tempo_input", "Tempo na Plataforma (em meses):", min = 1, max = 100, value = 10),
numericInput("produtos_input", "Produtos Visualizados:", min = 1, max = 100, value = 20),
selectInput("atividade_input", "Nível de Atividade:", choices = c("Alto", "Baixo", "Médio"), selected = "Alto"),
actionButton("recomendacao_btn", "Recomendar Produtos")
)
}
}
})
# Lógica após o botão "Seguir" ser clicado
observeEvent(input$seguir_btn, {
modelo_escolhido <- input$modelo_input
output$modelo_ui <- renderUI({})
# Lógica comum para os três modelos
observeEvent(input$previsao_btn, {
# Criando um data frame temporário com os dados inseridos pelo usuário
novo_dado <- data.frame(
idade = input$idade_input,
genero = input$genero_input,
historico_compras = input$historico_input,
categoria_preferida = input$categoria_input,
tempo_na_plataforma = input$tempo_input,
produtos_visualizados = input$produtos_input,
nivel_atividade = input$atividade_input
)
# Realizar previsão com base no modelo escolhido
previsao <- switch(
modelo_escolhido,
PrevisaoCompra = realizar_previsao(modelo_rc, novo_dado),
PrevisaoChurn = realizar_previsao(modelo_tc, novo_dado),
RecomendacaoProdutos = realizar_previsao(modelo_pr, novo_dado)
)
# Mensagem de saída
output$resultado_texto <- renderText({
if (previsao[1, "predict"] == "Sim") {
"SIM. Há uma grande possibilidade do usuário realizar a ação desejada."
} else {
"NÃO. Há uma grande possibilidade do usuário não realizar a ação desejada."
}
})
})
# Lógica específica para RecomendacaoProdutos
observeEvent(input$recomendacao_btn, {
# Criando um data frame temporário com os dados inseridos pelo usuário
novo_dado <- data.frame(
idade = input$idade_input,
genero = input$genero_input,
historico_compras = input$historico_input,
categoria_preferida = input$categoria_input,
tempo_na_plataforma = input$tempo_input,
produtos_visualizados = input$produtos_input,
nivel_atividade = input$atividade_input
)
# Realizar previsão com base no modelo escolhido
previsao <- realizar_previsao(modelo_pr, novo_dado)
# Mensagem de saída
output$resultado_texto <- renderText({
paste("Produto Recomendado:", previsao[1, "predict"])
})
})
})
}
# Rodando a aplicação
shinyApp(ui = ui, server = server)
# Função para realizar a previsão com os modelos
realizar_previsao <- function(modelo, novo_dado) {
# Modificando qualquer variável chr para factor
novo_dado <- novo_dado %>% mutate_if(is.character, factor)
# Criação de Novas Características (Variáveis)
novo_dado <- novo_dado %>% mutate(
razao_produtos_tempo = produtos_visualizados / tempo_na_plataforma,
interacao_idade_produtos = idade * produtos_visualizados
)
# Adicionando colunas temporárias faltantes
if (!("realizou_compra" %in% colnames(novo_dado))) novo_dado$realizou_compra <- NA
if (!("churn" %in% colnames(novo_dado))) novo_dado$churn <- NA
if (!("produto_recomendado" %in% colnames(novo_dado))) novo_dado$produto_recomendado <- NA
# Fazendo a previsão
previsao <- h2o.predict(modelo, as.h2o(novo_dado))
return(previsao)
}
# UI principal
ui <- fluidPage(
titlePanel("Escolha do Modelo"),
sidebarLayout(
sidebarPanel(
# Escolha do modelo
selectInput("modelo_input", "Escolha o Modelo:",
choices = c("PrevisaoCompra", "PrevisaoChurn", "RecomendacaoProdutos")),
# Botão "seguir"
actionButton("seguir_btn", "Seguir", disabled = TRUE)
),
mainPanel(
# Conteúdo da interface do modelo escolhido
uiOutput("modelo_ui"),
# Saída
textOutput("resultado_texto")
)
)
)
# Server principal
server <- function(input, output, session) {
# Lógica para ativar/desativar o botão "seguir"
observe({
if (!is.null(input$modelo_input)) {
shinyjs::enable("seguir_btn")
} else {
shinyjs::disable("seguir_btn")
}
})
# Função para criar a interface do modelo escolhido
output$modelo_ui <- renderUI({
modelo_escolhido <- input$modelo_input
# Criar a interface do modelo escolhido
if (!is.null(modelo_escolhido)) {
if (modelo_escolhido == "PrevisaoCompra") {
# Interface do modelo PrevisaoCompra
fluidPage(
titlePanel("Previsão de Compra - Modelo RC"),
numericInput("idade_input", "Idade:", min = 18, max = 100, value = 25),
selectInput("genero_input", "Gênero:", choices = c("Feminino", "Masculino"), selected = "Feminino"),
selectInput("historico_input", "Histórico de Compras:", choices = c("Alto", "Baixo", "Médio"), selected = "Alto"),
selectInput("categoria_input", "Categoria Preferida:", choices = unique(dados$categoria_preferida), selected = unique(dados$categoria_preferida)[1]),
numericInput("tempo_input", "Tempo na Plataforma (em meses):", min = 1, max = 100, value = 10),
numericInput("produtos_input", "Produtos Visualizados:", min = 1, max = 100, value = 20),
selectInput("atividade_input", "Nível de Atividade:", choices = c("Alto", "Baixo", "Médio"), selected = "Alto"),
actionButton("previsao_btn", "Fazer Previsão")
)
} else if (modelo_escolhido == "PrevisaoChurn") {
# Interface do modelo PrevisaoChurn
fluidPage(
titlePanel("Previsão de Churn - Modelo TC"),
numericInput("idade_input", "Idade:", min = 18, max = 100, value = 25),
selectInput("genero_input", "Gênero:", choices = c("Feminino", "Masculino"), selected = "Feminino"),
selectInput("historico_input", "Histórico de Compras:", choices = c("Alto", "Baixo", "Médio"), selected = "Alto"),
selectInput("categoria_input", "Categoria Preferida:", choices = unique(dados$categoria_preferida), selected = unique(dados$categoria_preferida)[1]),
numericInput("tempo_input", "Tempo na Plataforma (em meses):", min = 1, max = 100, value = 10),
numericInput("produtos_input", "Produtos Visualizados:", min = 1, max = 100, value = 20),
selectInput("atividade_input", "Nível de Atividade:", choices = c("Alto", "Baixo", "Médio"), selected = "Alto"),
actionButton("previsao_btn", "Fazer Previsão")
)
} else if (modelo_escolhido == "RecomendacaoProdutos") {
# Interface do modelo RecomendacaoProdutos
fluidPage(
titlePanel("Recomendação de Produtos - Modelo PR"),
numericInput("idade_input", "Idade:", min = 18, max = 100, value = 25),
selectInput("genero_input", "Gênero:", choices = c("Feminino", "Masculino"), selected = "Feminino"),
selectInput("historico_input", "Histórico de Compras:", choices = c("Alto", "Baixo", "Médio"), selected = "Alto"),
selectInput("categoria_input", "Categoria Preferida:", choices = unique(dados$categoria_preferida), selected = unique(dados$categoria_preferida)[1]),
numericInput("tempo_input", "Tempo na Plataforma (em meses):", min = 1, max = 100, value = 10),
numericInput("produtos_input", "Produtos Visualizados:", min = 1, max = 100, value = 20),
selectInput("atividade_input", "Nível de Atividade:", choices = c("Alto", "Baixo", "Médio"), selected = "Alto"),
actionButton("recomendacao_btn", "Recomendar Produtos")
)
}
}
})
# Lógica após o botão "Seguir" ser clicado
observeEvent(input$seguir_btn, {
modelo_escolhido <- input$modelo_input
output$modelo_ui <- renderUI({})
# Lógica comum para os três modelos
observeEvent(input$previsao_btn, {
# Criando um data frame temporário com os dados inseridos pelo usuário
novo_dado <- data.frame(
idade = input$idade_input,
genero = input$genero_input,
historico_compras = input$historico_input,
categoria_preferida = input$categoria_input,
tempo_na_plataforma = input$tempo_input,
produtos_visualizados = input$produtos_input,
nivel_atividade = input$atividade_input
)
# Realizar previsão com base no modelo escolhido
previsao <- switch(
modelo_escolhido,
PrevisaoCompra = realizar_previsao(modelo_rc, novo_dado),
PrevisaoChurn = realizar_previsao(modelo_tc, novo_dado),
RecomendacaoProdutos = realizar_previsao(modelo_pr, novo_dado)
)
# Mensagem de saída
output$resultado_texto <- renderText({
if (previsao[1, "predict"] == "Sim") {
"SIM. Há uma grande possibilidade do usuário realizar a ação desejada."
} else {
"NÃO. Há uma grande possibilidade do usuário não realizar a ação desejada."
}
})
})
# Lógica específica para RecomendacaoProdutos
observeEvent(input$recomendacao_btn, {
# Criando um data frame temporário com os dados inseridos pelo usuário
novo_dado <- data.frame(
idade = input$idade_input,
genero = input$genero_input,
historico_compras = input$historico_input,
categoria_preferida = input$categoria_input,
tempo_na_plataforma = input$tempo_input,
produtos_visualizados = input$produtos_input,
nivel_atividade = input$atividade_input
)
# Realizar previsão com base no modelo escolhido
previsao <- realizar_previsao(modelo_pr, novo_dado)
# Mensagem de saída
output$resultado_texto <- renderText({
paste("Produto Recomendado:", previsao[1, "predict"])
})
})
})
}
# Rodando a aplicação
shinyApp(ui = ui, server = server)
# Função para realizar a previsão com os modelos
realizar_previsao <- function(modelo, novo_dado) {
# Modificando qualquer variável chr para factor
novo_dado <- novo_dado %>% mutate_if(is.character, factor)
# Criação de Novas Características (Variáveis)
novo_dado <- novo_dado %>% mutate(
razao_produtos_tempo = produtos_visualizados / tempo_na_plataforma,
interacao_idade_produtos = idade * produtos_visualizados
)
# Adicionando colunas temporárias faltantes
if (!("realizou_compra" %in% colnames(novo_dado))) novo_dado$realizou_compra <- NA
if (!("churn" %in% colnames(novo_dado))) novo_dado$churn <- NA
if (!("produto_recomendado" %in% colnames(novo_dado))) novo_dado$produto_recomendado <- NA
# Fazendo a previsão
previsao <- h2o.predict(modelo, as.h2o(novo_dado))
return(previsao)
}
# UI principal
ui <- fluidPage(
titlePanel("Escolha do Modelo"),
sidebarLayout(
sidebarPanel(
# Escolha do modelo
selectInput("modelo_input", "Escolha o Modelo:",
choices = c("PrevisaoCompra", "PrevisaoChurn", "RecomendacaoProdutos")),
),
mainPanel(
# Conteúdo da interface do modelo escolhido
uiOutput("modelo_ui"),
# Saída
textOutput("resultado_texto")
)
)
)
# Server principal
server <- function(input, output, session) {
# Função para criar a interface do modelo escolhido
output$modelo_ui <- renderUI({
modelo_escolhido <- input$modelo_input
# Criar a interface do modelo escolhido
if (!is.null(modelo_escolhido)) {
if (modelo_escolhido == "PrevisaoCompra") {
# Interface do modelo PrevisaoCompra
fluidPage(
titlePanel("Previsão de Compra - Modelo RC"),
numericInput("idade_input", "Idade:", min = 18, max = 100, value = 25),
selectInput("genero_input", "Gênero:", choices = c("Feminino", "Masculino"), selected = "Feminino"),
selectInput("historico_input", "Histórico de Compras:", choices = c("Alto", "Baixo", "Médio"), selected = "Alto"),
selectInput("categoria_input", "Categoria Preferida:", choices = unique(dados$categoria_preferida), selected = unique(dados$categoria_preferida)[1]),
numericInput("tempo_input", "Tempo na Plataforma (em meses):", min = 1, max = 100, value = 10),
numericInput("produtos_input", "Produtos Visualizados:", min = 1, max = 100, value = 20),
selectInput("atividade_input", "Nível de Atividade:", choices = c("Alto", "Baixo", "Médio"), selected = "Alto"),
actionButton("previsao_btn", "Fazer Previsão")
)
} else if (modelo_escolhido == "PrevisaoChurn") {
# Interface do modelo PrevisaoChurn
fluidPage(
titlePanel("Previsão de Churn - Modelo TC"),
numericInput("idade_input", "Idade:", min = 18, max = 100, value = 25),
selectInput("genero_input", "Gênero:", choices = c("Feminino", "Masculino"), selected = "Feminino"),
selectInput("historico_input", "Histórico de Compras:", choices = c("Alto", "Baixo", "Médio"), selected = "Alto"),
selectInput("categoria_input", "Categoria Preferida:", choices = unique(dados$categoria_preferida), selected = unique(dados$categoria_preferida)[1]),
numericInput("tempo_input", "Tempo na Plataforma (em meses):", min = 1, max = 100, value = 10),
numericInput("produtos_input", "Produtos Visualizados:", min = 1, max = 100, value = 20),
selectInput("atividade_input", "Nível de Atividade:", choices = c("Alto", "Baixo", "Médio"), selected = "Alto"),
actionButton("previsao_btn", "Fazer Previsão")
)
} else if (modelo_escolhido == "RecomendacaoProdutos") {
# Interface do modelo RecomendacaoProdutos
fluidPage(
titlePanel("Recomendação de Produtos - Modelo PR"),
numericInput("idade_input", "Idade:", min = 18, max = 100, value = 25),
selectInput("genero_input", "Gênero:", choices = c("Feminino", "Masculino"), selected = "Feminino"),
selectInput("historico_input", "Histórico de Compras:", choices = c("Alto", "Baixo", "Médio"), selected = "Alto"),
selectInput("categoria_input", "Categoria Preferida:", choices = unique(dados$categoria_preferida), selected = unique(dados$categoria_preferida)[1]),
numericInput("tempo_input", "Tempo na Plataforma (em meses):", min = 1, max = 100, value = 10),
numericInput("produtos_input", "Produtos Visualizados:", min = 1, max = 100, value = 20),
selectInput("atividade_input", "Nível de Atividade:", choices = c("Alto", "Baixo", "Médio"), selected = "Alto"),
actionButton("recomendacao_btn", "Recomendar Produtos")
)
}
}
})
# Lógica para realizar a previsão
observeEvent(input$previsao_btn, {
# Criando um data frame temporário com os dados inseridos pelo usuário
novo_dado <- data.frame(
idade = input$idade_input,
genero = input$genero_input,
historico_compras = input$historico_input,
categoria_preferida = input$categoria_input,
tempo_na_plataforma = input$tempo_input,
produtos_visualizados = input$produtos_input,
nivel_atividade = input$atividade_input
)
# Realizar previsão com base no modelo escolhido
previsao <- switch(
input$modelo_input,
PrevisaoCompra = realizar_previsao(modelo_rc, novo_dado),
PrevisaoChurn = realizar_previsao(modelo_tc, novo_dado),
RecomendacaoProdutos = realizar_previsao(modelo_pr, novo_dado)
)
# Mensagem de saída
output$resultado_texto <- renderText({
if (previsao[1, "predict"] == "Sim") {
"SIM. Há uma grande possibilidade do usuário realizar a ação desejada."
} else {
"NÃO. Há uma grande possibilidade do usuário não realizar a ação desejada."
}
})
})
# Lógica específica para RecomendacaoProdutos
observeEvent(input$recomendacao_btn, {
# Criando um data frame temporário com os dados inseridos pelo usuário
novo_dado <- data.frame(
idade = input$idade_input,
genero = input$genero_input,
historico_compras = input$historico_input,
categoria_preferida = input$categoria_input,
tempo_na_plataforma = input$tempo_input,
produtos_visualizados = input$produtos_input,
nivel_atividade = input$atividade_input
)
# Realizar previsão com base no modelo escolhido
previsao <- realizar_previsao(modelo_pr, novo_dado)
# Mensagem de saída
output$resultado_texto <- renderText({
paste("Produto Recomendado:", previsao[1, "predict"])
})
})
}
# Rodando a aplicação
shinyApp(ui = ui, server = server)
## Desliga o H2O
h2o.shutdown()
# Rodando a aplicação
shinyApp(ui = ui, server = server)
