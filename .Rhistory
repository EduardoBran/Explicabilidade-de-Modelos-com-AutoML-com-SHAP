verbatimTextOutput("prediction_output")
)
)
)
# Servidor Shiny
server <- function(input, output) {
# Reaja ao botão de previsão
observeEvent(input$predict_button, {
# Crie um novo conjunto de dados com base nas entradas do usuário
new_data <- data.frame(
CheckingAcctStat = factor(input$checking_acct_stat, levels = levels(df$CheckingAcctStat)),
Duration_f = as.factor(ifelse(as.integer(input$duration) <= 17.6, "(0,17.6]",
ifelse(as.integer(input$duration) <= 31.2, "(17.6,31.2]",
ifelse(as.integer(input$duration) <= 46.8, "(31.2,46.8]",
ifelse(as.integer(input$duration) <= 62.4, "(46.8,62.4]", "(62.4,100]"))))),
Purpose = factor(input$purpose, levels = levels(df$Purpose)),
CreditHistory = factor(input$credit_history, levels = levels(df$CreditHistory)),
SavingsBonds = factor(input$savings_bonds, levels = levels(df$SavingsBonds)),
Employment = factor(input$employment, levels = levels(df$Employment)),
CreditAmount_f = as.factor(ifelse(as.integer(input$credit_amount) <= 3880, "(0,3.88e+03]",
ifelse(as.integer(input$credit_amount) <= 6510, "(3.88e+03,6.51e+03]",
ifelse(as.integer(input$credit_amount) <= 9140, "(6.51e+03,9.14e+03]",
ifelse(as.integer(input$credit_amount) <= 11770, "(9.14e+03,1.18e+04]", "(1.18e+04,1e+06]"))))))
# Ajustar níveis novamente para garantir correspondência
for (col in names(new_data)) {
if (is.factor(new_data[[col]])) {
levels(new_data[[col]]) <- levels(df[[col]])
}
}
# Realize a previsão usando o modelo
prediction <- tryCatch(
predict(modelo, new_data),
error = function(e) {
return(paste("Erro na previsão:", e))
}
)
# Traduza a previsão para mensagens mais compreensíveis
prediction_message <- switch(as.character(prediction),
"1" = "Crédito Aprovado!",
"2" = "Crédito Reprovado!",
"Erro na previsão: New factor levels not present in the training data" = "Erro na previsão: Novos níveis de fatores não presentes nos dados de treinamento",
"Erro na previsão: Type of predictors in new data do not match that of the training data" = "Erro na previsão: O tipo de preditores nos novos dados não corresponde ao dos dados de treinamento",
"Erro na previsão:" = "Erro na previsão: Ocorreu um erro durante a previsão")
# Mostre a previsão na saída
output$prediction_output <- renderText({
paste("Resultado da Previsão: ", prediction_message)
})
})
}
# Execute o aplicativo Shiny
shinyApp(ui, server)
# Execute o aplicativo Shiny
shinyApp(ui, server)
library(shiny)
library(randomForest)
# Carregando o modelo
modelo <- readRDS("~/Desktop/DataScience/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/15.Projeto-de-Classificação-com-R-e-Azure-ML_-_Risco_de_Credito_Clientes_Banco/modelo.rds")
print(modelo)
# Carregando o dataset antes da transformação (baixado do Azure ML)
df <- read.csv("~/Desktop/DataScience/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/15.Projeto-de-Classificação-com-R-e-Azure-ML_-_Risco_de_Credito_Clientes_Banco/dados.csv", stringsAsFactors = TRUE)
head(df)
# Ajustar níveis das variáveis categóricas
df$Duration_f <- as.factor(df$Duration_f)
df$CreditAmount_f <- as.factor(df$CreditAmount_f)
# Interface do Usuário Shiny
ui <- fluidPage(
titlePanel("Previsão de Risco de Crédito"),
sidebarLayout(
sidebarPanel(
# Adicione aqui os controles para entrada de dados, por exemplo:
selectInput("checking_acct_stat", "Status da Conta Corrente",
choices = c("Menor que 0" = "A11",
"Entre 0 e 200" = "A12",
"Maior que 200" = "A13",
"Não possui" = "A14")),
sliderInput("duration", "Duração do Crédito", min = 0, max = 100, value = 50),
selectInput("purpose", "Finalidade do Crédito",
choices = c("Carro (novo)" = "A40",
"Carro (usado)" = "A41",
"Móveis/Equipamentos" = "A42",
"Rádio/Televisão" = "A43",
"Eletrodomésticos" = "A44",
"Reparos" = "A45",
"Educação" = "A46",
"Férias" = "A47",
"Reciclagem/Retreinamento" = "A48",
"Negócios" = "A49",
"Outros" = "A410")),
selectInput("credit_history", "Histórico de Crédito", choices = unique(df$CreditHistory)),
selectInput("savings_bonds", "Títulos de Poupança", choices = unique(df$SavingsBonds)),
selectInput("employment", "Emprego Atual", choices = unique(df$Employment)),
sliderInput("credit_amount", "Valor do Crédito", min = 0, max = 1000000, value = 500000),
# Adicione mais controles conforme necessário
actionButton("predict_button", "Realizar Previsão")
),
mainPanel(
# Adicione aqui os resultados da previsão, por exemplo:
verbatimTextOutput("prediction_output")
)
)
)
# Servidor Shiny
server <- function(input, output) {
# Reaja ao botão de previsão
observeEvent(input$predict_button, {
# Crie um novo conjunto de dados com base nas entradas do usuário
new_data <- data.frame(
CheckingAcctStat = factor(input$checking_acct_stat, levels = levels(df$CheckingAcctStat)),
Duration_f = as.factor(ifelse(as.integer(input$duration) <= 17.6, "(0,17.6]",
ifelse(as.integer(input$duration) <= 31.2, "(17.6,31.2]",
ifelse(as.integer(input$duration) <= 46.8, "(31.2,46.8]",
ifelse(as.integer(input$duration) <= 62.4, "(46.8,62.4]", "(62.4,100]"))))),
Purpose = factor(input$purpose, levels = levels(df$Purpose)),
CreditHistory = factor(input$credit_history, levels = levels(df$CreditHistory)),
SavingsBonds = factor(input$savings_bonds, levels = levels(df$SavingsBonds)),
Employment = factor(input$employment, levels = levels(df$Employment)),
CreditAmount_f = as.factor(ifelse(as.integer(input$credit_amount) <= 3880, "(0,3.88e+03]",
ifelse(as.integer(input$credit_amount) <= 6510, "(3.88e+03,6.51e+03]",
ifelse(as.integer(input$credit_amount) <= 9140, "(6.51e+03,9.14e+03]",
ifelse(as.integer(input$credit_amount) <= 11770, "(9.14e+03,1.18e+04]", "(1.18e+04,1e+06]"))))))
# Ajustar níveis novamente para garantir correspondência
for (col in names(new_data)) {
if (is.factor(new_data[[col]])) {
levels(new_data[[col]]) <- levels(df[[col]])
}
}
# Realize a previsão usando o modelo
prediction <- tryCatch(
predict(modelo, new_data),
error = function(e) {
return(paste("Erro na previsão:", e))
}
)
# Traduza a previsão para mensagens mais compreensíveis
prediction_message <- switch(as.character(prediction),
"1" = "Crédito Aprovado!",
"2" = "Crédito Reprovado!",
"Erro na previsão: New factor levels not present in the training data" = "Erro na previsão: Novos níveis de fatores não presentes nos dados de treinamento",
"Erro na previsão: Type of predictors in new data do not match that of the training data" = "Erro na previsão: O tipo de preditores nos novos dados não corresponde ao dos dados de treinamento",
"Erro na previsão:" = "Erro na previsão: Ocorreu um erro durante a previsão")
# Mostre a previsão na saída
output$prediction_output <- renderText({
paste("Resultado da Previsão: ", prediction_message)
})
})
}
# Execute o aplicativo Shiny
shinyApp(ui, server)
# Execute o aplicativo Shiny
shinyApp(ui, server)
# Interface do Usuário Shiny
ui <- fluidPage(
titlePanel("Previsão de Risco de Crédito"),
sidebarLayout(
sidebarPanel(
# Adicione aqui os controles para entrada de dados, por exemplo:
selectInput("checking_acct_stat", "Status da Conta Corrente",
choices = c("Menor que 0" = "A11",
"Entre 0 e 200" = "A12",
"Maior que 200" = "A13",
"Não possui" = "A14")),
sliderInput("duration", "Duração do Crédito", min = 0, max = 100, value = 50),
selectInput("purpose", "Finalidade do Crédito",
choices = c("Carro (novo)" = "A40",
"Carro (usado)" = "A41",
"Móveis/Equipamentos" = "A42",
"Rádio/Televisão" = "A43",
"Eletrodomésticos" = "A44",
"Reparos" = "A45",
"Educação" = "A46",
"Férias" = "A47",
"Reciclagem/Retreinamento" = "A48",
"Negócios" = "A49",
"Outros" = "A410")),
selectInput("credit_history", "Histórico de Crédito",
choices = c("Sem créditos tomados / todos os créditos pagos pontualmente." = "A30",
"Todos os créditos neste banco foram pagos pontualmente." = "A31",
"Créditos existentes pagos pontualmente até agora." = "A32",
"Atraso no pagamento no passado." = "A33",
"Conta crítica / outros créditos existentes (não neste banco)." = "A34")),
selectInput("savings_bonds", "Títulos de Poupança", choices = unique(df$SavingsBonds)),
selectInput("employment", "Emprego Atual", choices = unique(df$Employment)),
sliderInput("credit_amount", "Valor do Crédito", min = 0, max = 1000000, value = 500000),
# Adicione mais controles conforme necessário
actionButton("predict_button", "Realizar Previsão")
),
mainPanel(
# Adicione aqui os resultados da previsão, por exemplo:
verbatimTextOutput("prediction_output")
)
)
)
# Execute o aplicativo Shiny
shinyApp(ui, server)
# Interface do Usuário Shiny
ui <- fluidPage(
titlePanel("Previsão de Risco de Crédito"),
sidebarLayout(
sidebarPanel(
# Adicione aqui os controles para entrada de dados, por exemplo:
selectInput("checking_acct_stat", "Status da Conta Corrente",
choices = c("Menor que 0" = "A11",
"Entre 0 e 200" = "A12",
"Maior que 200" = "A13",
"Não possui" = "A14")),
sliderInput("duration", "Duração do Crédito", min = 0, max = 100, value = 50),
selectInput("purpose", "Finalidade do Crédito",
choices = c("Carro (novo)" = "A40",
"Carro (usado)" = "A41",
"Móveis/Equipamentos" = "A42",
"Rádio/Televisão" = "A43",
"Eletrodomésticos" = "A44",
"Reparos" = "A45",
"Educação" = "A46",
"Férias" = "A47",
"Reciclagem/Retreinamento" = "A48",
"Negócios" = "A49",
"Outros" = "A410")),
selectInput("credit_history", "Histórico de Crédito",
choices = c("Sem créditos tomados / todos os créditos pagos pontualmente." = "A30",
"Todos os créditos neste banco foram pagos pontualmente." = "A31",
"Créditos existentes pagos pontualmente até agora." = "A32",
"Atraso no pagamento no passado." = "A33",
"Conta crítica / outros créditos existentes (não neste banco)." = "A34")),
selectInput("savings_bonds", "Títulos de Poupança",
choices = c("Menos de 100 DM (Deutsche Marks) na conta poupança/títulos." = "A61",
"Entre 100 DM e menos de 500 DM na conta poupança/títulos." = "A62",
"Entre 500 DM e menos de 1000 DM na conta poupança/títulos." = "A63",
"1000 DM ou mais na conta poupança/títulos." = "A64",
"Desconhecido/nenhuma conta poupança." = "A65")),
selectInput("employment", "Emprego Atual", choices = unique(df$Employment)),
sliderInput("credit_amount", "Valor do Crédito", min = 0, max = 1000000, value = 500000),
# Adicione mais controles conforme necessário
actionButton("predict_button", "Realizar Previsão")
),
mainPanel(
# Adicione aqui os resultados da previsão, por exemplo:
verbatimTextOutput("prediction_output")
)
)
)
# Execute o aplicativo Shiny
shinyApp(ui, server)
# Interface do Usuário Shiny
ui <- fluidPage(
titlePanel("Previsão de Risco de Crédito"),
sidebarLayout(
sidebarPanel(
# Adicione aqui os controles para entrada de dados, por exemplo:
selectInput("checking_acct_stat", "Status da Conta Corrente",
choices = c("Menor que 0" = "A11",
"Entre 0 e 200" = "A12",
"Maior que 200" = "A13",
"Não possui" = "A14")),
sliderInput("duration", "Duração do Crédito", min = 0, max = 100, value = 50),
selectInput("purpose", "Finalidade do Crédito",
choices = c("Carro (novo)" = "A40",
"Carro (usado)" = "A41",
"Móveis/Equipamentos" = "A42",
"Rádio/Televisão" = "A43",
"Eletrodomésticos" = "A44",
"Reparos" = "A45",
"Educação" = "A46",
"Férias" = "A47",
"Reciclagem/Retreinamento" = "A48",
"Negócios" = "A49",
"Outros" = "A410")),
selectInput("credit_history", "Histórico de Crédito",
choices = c("Sem créditos tomados / todos os créditos pagos pontualmente." = "A30",
"Todos os créditos neste banco foram pagos pontualmente." = "A31",
"Créditos existentes pagos pontualmente até agora." = "A32",
"Atraso no pagamento no passado." = "A33",
"Conta crítica / outros créditos existentes (não neste banco)." = "A34")),
selectInput("savings_bonds", "Títulos de Poupança",
choices = c("Menos de 100 DM (Deutsche Marks) na conta poupança/títulos." = "A61",
"Entre 100 DM e menos de 500 DM na conta poupança/títulos." = "A62",
"Entre 500 DM e menos de 1000 DM na conta poupança/títulos." = "A63",
"1000 DM ou mais na conta poupança/títulos." = "A64",
"Desconhecido/nenhuma conta poupança." = "A65")),
selectInput("employment", "Emprego Atual",
choices = c("Desempregado." = "A71",
"Menos de 1 ano no emprego atual." = "A72",
"Entre 1 e menos de 4 anos no emprego atual." = "A73",
"Entre 4 e menos de 7 anos no emprego atual." = "A74",
"7 anos ou mais no emprego atual." = "A75")),
sliderInput("credit_amount", "Valor do Crédito", min = 0, max = 1000000, value = 500000),
# Adicione mais controles conforme necessário
actionButton("predict_button", "Realizar Previsão")
),
mainPanel(
# Adicione aqui os resultados da previsão, por exemplo:
verbatimTextOutput("prediction_output")
)
)
)
## Carregando Pacotes
library(shiny)
library(randomForest)
# Carregando o modelo
modelo <- readRDS("~/Desktop/DataScience/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/15.Projeto-de-Classificação-com-R-e-Azure-ML_-_Risco_de_Credito_Clientes_Banco/modelo.rds")
print(modelo)
# Carregando o dataset antes da transformação (baixado do Azure ML)
df <- read.csv("~/Desktop/DataScience/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/15.Projeto-de-Classificação-com-R-e-Azure-ML_-_Risco_de_Credito_Clientes_Banco/dados.csv", stringsAsFactors = TRUE)
head(df)
# Ajustar níveis das variáveis categóricas
df$Duration_f <- as.factor(df$Duration_f)
df$CreditAmount_f <- as.factor(df$CreditAmount_f)
# Interface do Usuário Shiny
ui <- fluidPage(
titlePanel("Previsão de Risco de Crédito"),
sidebarLayout(
sidebarPanel(
# Adicione aqui os controles para entrada de dados, por exemplo:
selectInput("checking_acct_stat", "Status da Conta Corrente",
choices = c("Menor que 0" = "A11",
"Entre 0 e 200" = "A12",
"Maior que 200" = "A13",
"Não possui" = "A14")),
sliderInput("duration", "Duração do Crédito", min = 0, max = 100, value = 50),
selectInput("purpose", "Finalidade do Crédito",
choices = c("Carro (novo)" = "A40",
"Carro (usado)" = "A41",
"Móveis/Equipamentos" = "A42",
"Rádio/Televisão" = "A43",
"Eletrodomésticos" = "A44",
"Reparos" = "A45",
"Educação" = "A46",
"Férias" = "A47",
"Reciclagem/Retreinamento" = "A48",
"Negócios" = "A49",
"Outros" = "A410")),
selectInput("credit_history", "Histórico de Crédito",
choices = c("Sem créditos tomados / todos os créditos pagos pontualmente." = "A30",
"Todos os créditos neste banco foram pagos pontualmente." = "A31",
"Créditos existentes pagos pontualmente até agora." = "A32",
"Atraso no pagamento no passado." = "A33",
"Conta crítica / outros créditos existentes (não neste banco)." = "A34")),
selectInput("savings_bonds", "Títulos de Poupança",
choices = c("Menos de 100 DM (Deutsche Marks) na conta poupança/títulos." = "A61",
"Entre 100 DM e menos de 500 DM na conta poupança/títulos." = "A62",
"Entre 500 DM e menos de 1000 DM na conta poupança/títulos." = "A63",
"1000 DM ou mais na conta poupança/títulos." = "A64",
"Desconhecido/nenhuma conta poupança." = "A65")),
selectInput("employment", "Emprego Atual",
choices = c("Desempregado." = "A71",
"Menos de 1 ano no emprego atual." = "A72",
"Entre 1 e menos de 4 anos no emprego atual." = "A73",
"Entre 4 e menos de 7 anos no emprego atual." = "A74",
"7 anos ou mais no emprego atual." = "A75")),
sliderInput("credit_amount", "Valor do Crédito", min = 0, max = 1000000, value = 500000),
# Adicione mais controles conforme necessário
actionButton("predict_button", "Realizar Previsão")
),
mainPanel(
# Adicione aqui os resultados da previsão, por exemplo:
verbatimTextOutput("prediction_output")
)
)
)
# Servidor Shiny
server <- function(input, output) {
# Reaja ao botão de previsão
observeEvent(input$predict_button, {
# Crie um novo conjunto de dados com base nas entradas do usuário
new_data <- data.frame(
CheckingAcctStat = factor(input$checking_acct_stat, levels = levels(df$CheckingAcctStat)),
Duration_f = as.factor(ifelse(as.integer(input$duration) <= 17.6, "(0,17.6]",
ifelse(as.integer(input$duration) <= 31.2, "(17.6,31.2]",
ifelse(as.integer(input$duration) <= 46.8, "(31.2,46.8]",
ifelse(as.integer(input$duration) <= 62.4, "(46.8,62.4]", "(62.4,100]"))))),
Purpose = factor(input$purpose, levels = levels(df$Purpose)),
CreditHistory = factor(input$credit_history, levels = levels(df$CreditHistory)),
SavingsBonds = factor(input$savings_bonds, levels = levels(df$SavingsBonds)),
Employment = factor(input$employment, levels = levels(df$Employment)),
CreditAmount_f = as.factor(ifelse(as.integer(input$credit_amount) <= 3880, "(0,3.88e+03]",
ifelse(as.integer(input$credit_amount) <= 6510, "(3.88e+03,6.51e+03]",
ifelse(as.integer(input$credit_amount) <= 9140, "(6.51e+03,9.14e+03]",
ifelse(as.integer(input$credit_amount) <= 11770, "(9.14e+03,1.18e+04]", "(1.18e+04,1e+06]"))))))
# Ajustar níveis novamente para garantir correspondência
for (col in names(new_data)) {
if (is.factor(new_data[[col]])) {
levels(new_data[[col]]) <- levels(df[[col]])
}
}
# Realize a previsão usando o modelo
prediction <- tryCatch(
predict(modelo, new_data),
error = function(e) {
return(paste("Erro na previsão:", e))
}
)
# Traduza a previsão para mensagens mais compreensíveis
prediction_message <- switch(as.character(prediction),
"1" = "Crédito Aprovado!",
"2" = "Crédito Reprovado!",
"Erro na previsão: New factor levels not present in the training data" = "Erro na previsão: Novos níveis de fatores não presentes nos dados de treinamento",
"Erro na previsão: Type of predictors in new data do not match that of the training data" = "Erro na previsão: O tipo de preditores nos novos dados não corresponde ao dos dados de treinamento",
"Erro na previsão:" = "Erro na previsão: Ocorreu um erro durante a previsão")
# Mostre a previsão na saída
output$prediction_output <- renderText({
paste("Resultado da Previsão: ", prediction_message)
})
})
}
# Execute o aplicativo Shiny
shinyApp(ui, server)
# Execute o aplicativo Shiny
shinyApp(ui, server)
####  MAIS_EXEMPLOS  ####
# Configurando o diretório de trabalho
setwd("~/Desktop/DataScience/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/19.Mini-Projeto-3_-_Explicabilidade_de_Modelos_AutoML_com_SHAP")
getwd()
## Carregar pacotes
library(tidyverse)      # manipulação de dados
library(ggbeeswarm)     # pacote que permite criar gráficos customizados sobre o ggplot2
library(ggplot2)        # gera gráficos
library(dplyr)          # manipulação de dados
library(randomForest)   # carrega algoritimo de ML
library(ROCR)           # Gerando uma curva ROC em R
library(caret)          # cria confusion matrix
library(readxl)         # carregar arquivos
library(glmnet)         # carrega algoritimo de ML
library(corrplot)       # criar gráfico de mapa de correlação
library(shiny)          # intercace gráfica
library(lubridate)
# Carregando o modelo
model_rand <- readRDS("modelos/modelo_randomForest_ex3.rds")
importance(model_rand)
# Carregar dados e realizar pré-processamento
dados <- data.frame(read.csv("datasets/metro/metro.csv", stringsAsFactors = FALSE))
str(dados)
# Renomear as colunas
nomes_colunas <- c("feriado", "temperatura_media", "chuva_1h", "neve_1h", "cobertura_nuvens",
"condicao_climatica_principal", "descricao_climatica", "data_hora", "volume_trafego")
dados <- dplyr::rename(dados, !!!setNames(names(dados), nomes_colunas))
# Remover valores ausentes (caso necessário)
dados <- na.omit(dados)
# Modificar variáveis para tipo factor
dados <- dados %>%
mutate_if(is.character, factor)
head(dados, 1)
str(dados)
# Interface
ui <- fluidPage(
titlePanel("Previsão de Volume de Tráfego"),
sidebarLayout(
sidebarPanel(
# Inserir campos para cada variável do conjunto de dados original
selectInput("feriado", "Feriado:", choices = unique(dados$feriado)),
numericInput("temperatura_media", "Temperatura Média (em Kelvin):", value = 0),
numericInput("chuva_1h", "Chuva em 1 hora (mm):", value = 0),
numericInput("neve_1h", "Neve em 1 hora (mm):", value = 0),
numericInput("cobertura_nuvens", "Cobertura de Nuvens (%):", value = 0),
selectInput("condicao_climatica_principal", "Condição Climática Principal:", choices = unique(dados$condicao_climatica_principal)),
selectInput("descricao_climatica", "Descrição Climática:", choices = unique(dados$descricao_climatica)),
dateInput("data_hora", "Data e Hora:", value = Sys.Date()),
actionButton("calcular", "Calcular")
),
mainPanel(
# Inserir um local para exibir os resultados
h4("Resultado da Previsão:"),
verbatimTextOutput("resultado")
)
)
)
# Definir o servidor
server <- function(input, output) {
# Criar um observador para o botão "Calcular"
observeEvent(input$calcular, {
# Criar um data frame com os dados inseridos pelo usuário
novo_dado <- data.frame(
feriado = input$feriado,
temperatura_media = as.numeric(input$temperatura_media),
chuva_1h = as.numeric(input$chuva_1h),
neve_1h = as.numeric(input$neve_1h),
cobertura_nuvens = as.numeric(input$cobertura_nuvens),
condicao_climatica_principal = input$condicao_climatica_principal,
descricao_climatica = input$descricao_climatica,
data_hora = as.POSIXct(input$data_hora)
)
# Adicionar as colunas de ano, mês, dia da semana e hora do dia
novo_dado <- novo_dado %>%
mutate(
ano = lubridate::year(data_hora),
mes = lubridate::month(data_hora),
dia_semana = lubridate::wday(data_hora),
hora_dia = lubridate::hour(data_hora)
)
novo_dado <- dplyr::select(novo_dado, -data_hora)
# Realizar a previsão com o modelo_rand
resultado <- predict(model_rand, newdata = novo_dado)
# Imprimir algumas informações de depuração
print("Resultado:")
print(class(resultado))
print(names(resultado))
# Inverter Count Encoding para variáveis categóricas
resultado$feriado <- levels(dados$feriado)[as.numeric(resultado$feriado)]
resultado$condicao_climatica_principal <- levels(dados$condicao_climatica_principal)[as.numeric(resultado$condicao_climatica_principal)]
resultado$descricao_climatica <- levels(dados$descricao_climatica)[as.numeric(resultado$descricao_climatica)]
# Inverter normalização para variáveis numéricas
variaveis_numericas <- names(novo_dado)[sapply(novo_dado, is.numeric)]
resultado[, variaveis_numericas] <- lapply(variaveis_numericas, function(var) {
(resultado[[var]] - mean(dados[[var]])) / sd(dados[[var]])
})
# Exibir o resultado na interface
output$resultado <- renderPrint({
paste("A previsão do volume de tráfego é:", resultado$volume_trafego)
})
})
}
# Criar a aplicação shiny
shinyApp(ui = ui, server = server)
