cod_atividade_flare_24hs = substr(dados, 11, 11),
historicamente_complexo = substr(dados, 13, 13),
regiao_complexa_disco_solar = substr(dados, 15, 15),
area = substr(dados, 17, 17),
area_maior_mancha = substr(dados, 19, 19)
) %>%
select(data, cod_classe, cod_tam_mancha_solar, cod_dist_manchas_solares,
atividade, evolucao, cod_atividade_flare_24hs,
historicamente_complexo, regiao_complexa_disco_solar,
area, area_maior_mancha)
# Modificando variáveis para tipo factor
dados <- dados %>%
mutate_if(is.character, factor)
# Visualizar as primeiras linhas dos dados transformados
head(dados)
# Tipo de Dados
dim(dados)
str(dados)
summary(dados)
# Convertendo a variável categórica em binária
dados$classe_C <- ifelse(dados$cod_classe == "C", 1, 0)
# Convertendo as variáveis para tipo numérico
dados_num <- as.data.frame(lapply(dados[, 3:11], as.numeric))
set.seed(123)
indices <- sample(1:nrow(dados_num), 0.8 * nrow(dados_num))
dados_treino <- dados_num[indices, ]
dados_teste <- dados_num[-indices, ]
# Criando um modelo para prever o número de erupções solares da classe C
modelo_C <- glmnet(as.matrix(dados_treino[, 1:10]), dados_treino$classe_C, family = "binomial")
# Selecionar as colunas necessárias do conjunto de treino
colunas_preditoras <- c("cod_tam_mancha_solar", "cod_dist_manchas_solares", "atividade", "evolucao",
"cod_atividade_flare_24hs", "historicamente_complexo", "regiao_complexa_disco_solar", "area", "area_maior_mancha")
# Criar o modelo para prever o número de erupções solares da classe C
modelo_C <- glmnet(as.matrix(dados_treino[, colunas_preditoras]), dados_treino$classe_C, family = "binomial")
## Carregando dataset
dados <- data.frame(read_csv("datasets/solar+flare/flare.data1"))
dados2 <- data.frame(read_csv("datasets/solar+flare/flare.data2"))
head(dados)
head(dados2)
colnames(dados)
colnames(dados2)
## Análise Exploratória
# Adicionar uma coluna "data" aos dois conjuntos de dados
dados$data <- "02.13.69.to.03.27.69"
dados2$data <- "08.19.78.to.12.23.78"
# Selecionar apenas as colunas necessárias de cada conjunto de dados
dados_selecionados <- dados %>% select(data, X.......DATA1..1969.FLARE.DATA...02.13.69.to.03.27.69.........)
dados2_selecionados <- dados2 %>% select(data, X........DATA2..1978.FLARE.DATA..08.19.78.to.12.23.78.......)
# Renomear as colunas para simplificar
colnames(dados_selecionados) <- c("data", "dados")
colnames(dados2_selecionados) <- c("data", "dados")
# Unir os datasets
rm(dados)
dados <- bind_rows(dados_selecionados, dados2_selecionados)
rm(dados_selecionados)
rm(dados2_selecionados)
rm(dados2)
table(dados$data)
# Separar a coluna 'dados' em colunas individuais
dados <- dados %>%
mutate(
cod_classe = substr(dados, 1, 1),
cod_tam_mancha_solar = substr(dados, 3, 3),
cod_dist_manchas_solares = substr(dados, 5, 5),
atividade = substr(dados, 7, 7),
evolucao = substr(dados, 9, 9),
cod_atividade_flare_24hs = substr(dados, 11, 11),
historicamente_complexo = substr(dados, 13, 13),
regiao_complexa_disco_solar = substr(dados, 15, 15),
area = substr(dados, 17, 17),
area_maior_mancha = substr(dados, 19, 19)
) %>%
select(data, cod_classe, cod_tam_mancha_solar, cod_dist_manchas_solares,
atividade, evolucao, cod_atividade_flare_24hs,
historicamente_complexo, regiao_complexa_disco_solar,
area, area_maior_mancha)
# Modificando variáveis para tipo factor
dados <- dados %>%
mutate_if(is.character, factor)
# Visualizar as primeiras linhas dos dados transformados
head(dados)
# Tipo de Dados
dim(dados)
str(dados)
summary(dados)
install.packages("nnet", dependencies = TRUE)
install.packages("nnet", dependencies = TRUE)
# Configurando o diretório de trabalho
setwd("~/Desktop/DataScience/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/19.Mini-Projeto-3_-_Explicabilidade_de_Modelos_AutoML_com_SHAP")
getwd()
## Carregar pacotes
library(tidyverse)      # manipulação de dados
library(ggbeeswarm)     # pacote que permite criar gráficos customizados sobre o ggplot2
library(ggplot2)        # gera gráficos
library(dplyr)          # manipulação de dados
library(randomForest)   # carrega algoritimo de ML
library(ROCR)           # Gerando uma curva ROC em R
library(caret)          # Cria confusion matrix
library(readxl)
library(glmnet)
dados <- data.frame(read_csv("datasets/solar+flare/flare.data1"))
dados2 <- data.frame(read_csv("datasets/solar+flare/flare.data2"))
head(dados)
head(dados2)
colnames(dados)
colnames(dados2)
## Análise Exploratória
# Adicionar uma coluna "data" aos dois conjuntos de dados
dados$data <- "02.13.69.to.03.27.69"
dados2$data <- "08.19.78.to.12.23.78"
# Selecionar apenas as colunas necessárias de cada conjunto de dados
dados_selecionados <- dados %>% select(data, X.......DATA1..1969.FLARE.DATA...02.13.69.to.03.27.69.........)
dados2_selecionados <- dados2 %>% select(data, X........DATA2..1978.FLARE.DATA..08.19.78.to.12.23.78.......)
# Renomear as colunas para simplificar
colnames(dados_selecionados) <- c("data", "dados")
colnames(dados2_selecionados) <- c("data", "dados")
# Unir os datasets
rm(dados)
dados <- bind_rows(dados_selecionados, dados2_selecionados)
rm(dados_selecionados)
rm(dados2_selecionados)
rm(dados2)
table(dados$data)
# Separar a coluna 'dados' em colunas individuais
dados <- dados %>%
mutate(
cod_classe = substr(dados, 1, 1),
cod_tam_mancha_solar = substr(dados, 3, 3),
cod_dist_manchas_solares = substr(dados, 5, 5),
atividade = substr(dados, 7, 7),
evolucao = substr(dados, 9, 9),
cod_atividade_flare_24hs = substr(dados, 11, 11),
historicamente_complexo = substr(dados, 13, 13),
regiao_complexa_disco_solar = substr(dados, 15, 15),
area = substr(dados, 17, 17),
area_maior_mancha = substr(dados, 19, 19)
) %>%
select(data, cod_classe, cod_tam_mancha_solar, cod_dist_manchas_solares,
atividade, evolucao, cod_atividade_flare_24hs,
historicamente_complexo, regiao_complexa_disco_solar,
area, area_maior_mancha)
# Modificando variáveis para tipo factor
dados <- dados %>%
mutate_if(is.character, factor)
# Visualizar as primeiras linhas dos dados transformados
head(dados)
# Tipo de Dados
dim(dados)
str(dados)
summary(dados)
library(randomForest)
library(glmnet)
library(nnet)
# Dividir o conjunto de dados em treino e teste
set.seed(123)
split_index <- createDataPartition(dados$cod_classe, p = 0.7, list = FALSE)
train_data <- dados[split_index, ]
test_data <- dados[-split_index, ]
# Modelo para prever o código de classe
model_classe <- train(
cod_classe ~ .,
data = train_data,
method = "rf",  # Random Forest
trControl = trainControl(method = "cv", number = 5)
)
# Modelo para prever o número de erupções solares da classe C
model_C <- train(
atividade ~ .,
data = filter(train_data, cod_classe == "C"),
method = "glmnet",  # Elastic Net
trControl = trainControl(method = "cv", number = 5)
)
# Modelo para prever o número de erupções solares da classe M
model_M <- train(
atividade ~ .,
data = filter(train_data, cod_classe == "M"),
method = "glmnet",  # Elastic Net
trControl = trainControl(method = "cv", number = 5)
)
# Verificar valores ausentes no conjunto de dados original
sum(is.na(dados))
# Modelo para prever o número de erupções solares da classe M
model_M <- train(
atividade ~ .,
data = filter(train_data, cod_classe == "M"),
method = "glmnet",  # Elastic Net
trControl = trainControl(method = "cv", number = 5)
)
# Verificar valores ausentes no conjunto de dados original
sum(is.na(train_data))
# Preencher valores ausentes (caso necessário)
dados <- na.omit(dados)  # Remove linhas com valores ausentes
# Dividir o conjunto de dados em treino e teste
set.seed(123)
split_index <- createDataPartition(dados$cod_classe, p = 0.7, list = FALSE)
train_data <- dados[split_index, ]
test_data <- dados[-split_index, ]
# Modelo para prever o código de classe
model_classe <- train(
cod_classe ~ .,
data = train_data,
method = "rf",  # Random Forest
trControl = trainControl(method = "cv", number = 5)
)
# Modelo para prever o número de erupções solares da classe C
model_C <- train(
atividade ~ .,
data = filter(train_data, cod_classe == "C"),
method = "glmnet",  # Elastic Net
trControl = trainControl(method = "cv", number = 5)
)
# Modelo para prever o número de erupções solares da classe M
model_M <- train(
atividade ~ .,
data = filter(train_data, cod_classe == "M"),
method = "glmnet",  # Elastic Net
trControl = trainControl(method = "cv", number = 5)
)
# Verificar linhas com valores ausentes no conjunto de treino
rows_with_na <- which(rowSums(is.na(train_data)) > 0)
print(rows_with_na)
train_data <- train_data[complete.cases(train_data), ]
# Modelo para prever o número de erupções solares da classe M
model_M <- train(
atividade ~ .,
data = filter(train_data, cod_classe == "M"),
method = "glmnet",  # Elastic Net
trControl = trainControl(method = "cv", number = 5)
)
# Verificar colinearidade
cor_matrix <- cor(train_data[, -c(1, 2)])
# Selecionar apenas as colunas numéricas
numeric_cols <- sapply(train_data, is.numeric)
train_data_numeric <- train_data[, numeric_cols]
# Verificar colinearidade
cor_matrix <- cor(train_data_numeric)
highly_correlated <- findCorrelation(cor_matrix, cutoff = 0.8)
print(names(highly_correlated))
# Verificar se há valores ausentes na variável alvo para a classe M
sum(is.na(filter(train_data, cod_classe == "M")$atividade))
# Modelo para prever o número de erupções solares da classe M
model_M <- train(
atividade ~ .,
data = filter(train_data, cod_classe == "M"),
method = "glmnet",  # Elastic Net
trControl = trainControl(method = "cv", number = 5),
tuneGrid = expand.grid(alpha = seq(0, 1, by = 0.1), lambda = seq(0.001, 1, by = 0.01))
)
table(train_data$cod_classe)
table(test_data$cod_classe)
table(dados$data)
table(dados$cod_classe)
View(dados)
dados <- data.frame(read_csv("datasets/solar+flare/flare.data1"))
dados2 <- data.frame(read_csv("datasets/solar+flare/flare.data2"))
head(dados)
head(dados2)
colnames(dados)
colnames(dados2)
## Análise Exploratória
# Adicionar uma coluna "data" aos dois conjuntos de dados
dados$data <- "02.13.69.to.03.27.69"
dados2$data <- "08.19.78.to.12.23.78"
# Selecionar apenas as colunas necessárias de cada conjunto de dados
dados_selecionados <- dados %>% select(data, X.......DATA1..1969.FLARE.DATA...02.13.69.to.03.27.69.........)
dados2_selecionados <- dados2 %>% select(data, X........DATA2..1978.FLARE.DATA..08.19.78.to.12.23.78.......)
# Renomear as colunas para simplificar
colnames(dados_selecionados) <- c("data", "dados")
colnames(dados2_selecionados) <- c("data", "dados")
# Unir os datasets
rm(dados)
dados <- bind_rows(dados_selecionados, dados2_selecionados)
rm(dados_selecionados)
rm(dados2_selecionados)
rm(dados2)
table(dados$data)
# Separar a coluna 'dados' em colunas individuais
dados <- dados %>%
mutate(
cod_classe = substr(dados, 1, 1),
cod_tam_mancha_solar = substr(dados, 3, 3),
cod_dist_manchas_solares = substr(dados, 5, 5),
atividade = substr(dados, 7, 7),
evolucao = substr(dados, 9, 9),
cod_atividade_flare_24hs = substr(dados, 11, 11),
historicamente_complexo = substr(dados, 13, 13),
regiao_complexa_disco_solar = substr(dados, 15, 15),
area = substr(dados, 17, 17),
area_maior_mancha = substr(dados, 19, 19)
) %>%
select(data, cod_classe, cod_tam_mancha_solar, cod_dist_manchas_solares,
atividade, evolucao, cod_atividade_flare_24hs,
historicamente_complexo, regiao_complexa_disco_solar,
area, area_maior_mancha)
# Modificando variáveis para tipo factor
dados <- dados %>%
mutate_if(is.character, factor)
# Visualizar as primeiras linhas dos dados transformados
head(dados)
# Tipo de Dados
dim(dados)
str(dados)
summary(dados)
table(dados$cod_classe)
# Preencher valores ausentes (caso necessário)
dados <- na.omit(dados)  # Remove linhas com valores ausentes
# Dividir o conjunto de dados em treino e teste
set.seed(123)
split_index <- createDataPartition(dados$cod_classe, p = 0.75, list = FALSE)
train_data <- dados[split_index, ]
test_data <- dados[-split_index, ]
table(train_data$cod_classe)
table(test_data$cod_classe)
# Modelo para prever o código de classe
model_classe <- train(
cod_classe ~ .,
data = train_data,
method = "rf",  # Random Forest
trControl = trainControl(method = "cv", number = 5)
)
# Modelo para prever o número de erupções solares da classe C
model_C <- train(
atividade ~ .,
data = filter(train_data, cod_classe == "C"),
method = "glmnet",  # Elastic Net
trControl = trainControl(method = "cv", number = 5)
)
# Modelo para prever o número de erupções solares da classe D
model_D <- train(
atividade ~ .,
data = filter(train_data, cod_classe == "D"),
method = "glmnet",  # Elastic Net
trControl = trainControl(method = "cv", number = 5)
)
model_D_tunado <- train(
atividade ~ .,
data = filter(train_data, cod_classe == "D"),
method = "glmnet",  # Elastic Net
trControl = trainControl(method = "cv", number = 5),
tuneGrid = expand.grid(alpha = seq(0, 1, by = 0.1), lambda = seq(0.001, 1, by = 0.01))
)
# Modelo para prever o número de erupções solares da classe H
model_H <- train(
atividade ~ .,
data = filter(train_data, cod_classe == "H"),
method = "glmnet",  # Elastic Net
trControl = trainControl(method = "cv", number = 5)
)
table(train_data$cod_classe)
table(test_data$cod_classe)
# Modelo para prever o número de erupções solares da classe H
model_H <- train(
atividade ~ .,
data = filter(train_data, cod_classe == "H"),
method = "glmnet",  # Elastic Net
trControl = trainControl(method = "cv", number = 5, maxit = 50000)
)
# Modelo para prever o número de erupções solares da classe H
model_H <- train(
atividade ~ .,
data = filter(train_data, cod_classe == "H"),
method = "glmnet",  # Elastic Net
trControl = trainControl(method = "cv", number = 5),
tuneGrid = expand.grid(alpha = seq(0, 1, by = 0.1), lambda = seq(0.001, 1, by = 0.01)),
preProcess = c("center", "scale"),
tuneLength = 10,  # Número de valores lambda a serem testados
na.action = na.omit  # Remover NAs nas variáveis preditoras
)
model_H_before <- train(
atividade ~ .,
data = filter(train_data, cod_classe == "H"),
method = "glmnet",  # Elastic Net
trControl = trainControl(method = "cv", number = 5),
tuneGrid = expand.grid(alpha = seq(0, 1, by = 0.1), lambda = seq(0.001, 1, by = 0.01)),
preProcess = c("center", "scale"),
tuneLength = 10,  # Número de valores lambda a serem testados
na.action = na.omit  # Remover NAs nas variáveis preditoras
)
# Avaliar os modelos nos dados de teste
predictions_classe <- predict(model_classe, newdata = test_data)
predictions_C <- predict(model_C, newdata = test_data)
predictions_D <- predict(model_D, newdata = test_data)
predictions_H <- predict(model_H, newdata = test_data)
# Avaliação da acurácia do modelo de classe
confusionMatrix(predictions_classe, test_data$cod_classe)
# Avaliação da acurácia do modelo de classe C
confusionMatrix(predictions_C, filter(test_data, cod_classe == "C")$atividade)
# Avaliação da acurácia do modelo de classe C
confusionMatrix(predictions_C, filter(test_data, cod_classe == "C")$atividade)
# Avaliação da acurácia do modelo de classe C
confusionMatrix(predictions_C, subset(test_data, cod_classe == "C")$atividade)
predictions_C <- predict(model_C, newdata = test_data)
predictions_C_C <- predictions_C[test_data$cod_classe == "C"]
# Avaliação da acurácia do modelo de classe C
confusionMatrix(predictions_C_C, subset(test_data, cod_classe == "C")$atividade)
# Avaliar os modelos nos dados de teste
predictions_classe <- predict(model_classe, newdata = test_data)
predictions_C <- predict(model_C, newdata = test_data)
predictions_C_C <- predictions_C[test_data$cod_classe == "C"]
predictions_D <- predict(model_D, newdata = test_data)
predictions_D_D <- predictions_D[test_data$cod_classe == "D"]
predictions_H <- predict(model_H, newdata = test_data)
predictions_H_H <- predictions_C[test_data$cod_classe == "H"]
predictions_H_H <- predictions_H[test_data$cod_classe == "H"]
# Preencher valores ausentes (caso necessário)
dados <- na.omit(dados)  # Remove linhas com valores ausentes
# Dividir o conjunto de dados em treino e teste
set.seed(123)
split_index <- createDataPartition(dados$cod_classe, p = 0.75, list = FALSE)
train_data <- dados[split_index, ]
test_data <- dados[-split_index, ]
table(train_data$cod_classe)
table(test_data$cod_classe)
# Modelo para prever o código de classe
model_classe <- train(
cod_classe ~ .,
data = train_data,
method = "rf",  # Random Forest
trControl = trainControl(method = "cv", number = 5)
)
# Modelo para prever o número de erupções solares da classe C
model_C <- train(
atividade ~ .,
data = filter(train_data, cod_classe == "C"),
method = "glmnet",  # Elastic Net
trControl = trainControl(method = "cv", number = 5)
)
# Modelo para prever o número de erupções solares da classe D
model_D <- train(
atividade ~ .,
data = filter(train_data, cod_classe == "D"),
method = "glmnet",  # Elastic Net
trControl = trainControl(method = "cv", number = 5)
)
model_D_tunado <- train(
atividade ~ .,
data = filter(train_data, cod_classe == "D"),
method = "glmnet",  # Elastic Net
trControl = trainControl(method = "cv", number = 5),
tuneGrid = expand.grid(alpha = seq(0, 1, by = 0.1), lambda = seq(0.001, 1, by = 0.01))
)
# Modelo para prever o número de erupções solares da classe H
model_H <- train(
atividade ~ .,
data = filter(train_data, cod_classe == "H"),
method = "glmnet",  # Elastic Net
trControl = trainControl(method = "cv", number = 5),
tuneGrid = expand.grid(alpha = seq(0, 1, by = 0.1), lambda = seq(0.001, 1, by = 0.01)),
preProcess = c("center", "scale"),
tuneLength = 10,  # Número de valores lambda a serem testados
na.action = na.omit  # Remover NAs nas variáveis preditoras
)
# Avaliar os modelos nos dados de teste
predictions_classe <- predict(model_classe, newdata = test_data)
predictions_C <- predict(model_C, newdata = test_data)
predictions_C_C <- predictions_C[test_data$cod_classe == "C"]
predictions_D <- predict(model_D, newdata = test_data)
predictions_D_D <- predictions_D[test_data$cod_classe == "D"]
predictions_H <- predict(model_H, newdata = test_data)
predictions_H_H <- predictions_H[test_data$cod_classe == "H"]
# Avaliação da acurácia do modelo de classe
confusionMatrix(predictions_classe, test_data$cod_classe)
# Avaliação da acurácia do modelo de classe C
confusionMatrix(predictions_C_C, subset(test_data, cod_classe == "C")$atividade)
# Avaliação da acurácia do modelo de classe D
confusionMatrix(predictions_D_D, filter(test_data, cod_classe == "D")$atividade)
# Avaliação da acurácia do modelo de classe H
confusionMatrix(predictions_H_H, filter(test_data, cod_classe == "H")$atividade)
# Criar dados fictícios para teste do modelo de classe C
novos_dados <- data.frame(
feature1 = c(valor1, valor2, valor3, valor4, valor5),
feature2 = c(valor6, valor7, valor8, valor9, valor10),
# Adicione outras características conforme necessário
)
head(test_data)
# Ajustar as características de novos_dados
novos_dados <- data.frame(
data = c("03.28.69.to.04.10.69", "03.28.69.to.04.10.69", "03.28.69.to.04.10.69", "03.28.69.to.04.10.69", "03.28.69.to.04.10.69"),
cod_classe = c("C", "D", "B", "D", "C"),
cod_tam_mancha_solar = c("S", "A", "X", "S", "A"),
cod_dist_manchas_solares = c("O", "O", "O", "O", "I"),
atividade = c(1, 1, 1, 1, 1),
evolucao = c(2, 3, 2, 2, 2)
)
# Fazer previsões usando o modelo de classe C
predictions_novos <- predict(model_C, newdata = novos_dados)
model_C
str(model_C)
test_data
head(teste_data)
head(test_data)
# Ajustar as características de novos_dados
novos_dados <- data.frame(
data = c("03.28.69.to.04.10.69", "03.28.69.to.04.10.69", "03.28.69.to.04.10.69", "03.28.69.to.04.10.69", "03.28.69.to.04.10.69"),
cod_classe = c("C", "D", "B", "D", "C"),
cod_tam_mancha_solar = c("S", "A", "X", "S", "A"),
cod_dist_manchas_solares = c("O", "O", "O", "O", "I"),
atividade = c(1, 1, 1, 1, 1),
evolucao = c(2, 3, 2, 2, 2),
cod_atividade_flare_24hs = c(1, 1, 1, 1, 1),
historicamente_complexo = c(1, 1, 1, 1, 1),
regiao_complexa_disco_solar = c(2, 2, 2, 2, 1),
area = c(1, 1, 1, 1, 1),
area_maior_mancha = c(2, 2, 1, 2, 2)
)
# Fazer previsões usando o modelo de classe C
predictions_novos <- predict(model_C, newdata = novos_dados)
# Modificando variáveis para tipo factor
novos_dados <- novos_dados %>%
mutate_if(is.character, factor)
# Fazer previsões usando o modelo de classe C
predictions_novos <- predict(model_C, newdata = novos_dados)
